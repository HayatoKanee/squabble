# Squabble Project Context

This is a Squabble-managed project using an engineer-driven sequential workflow with PM collaboration.

## Project Information
- **Description**: {{PROJECT_DESCRIPTION}}
- **Initialized**: {{INITIALIZED_DATE}}
- **Workspace**: .squabble/

## Architecture Overview
Squabble uses a sequential engineer-PM workflow:
- **Lead Engineer**: Drives implementation and technical decisions
- **Product Manager (PM)**: Refines requirements and reviews work
- **Specialists**: Provide domain expertise (Security, Architecture, etc.)

## Identifying Your Role

### You are the ENGINEER if:
- You have access to Squabble MCP tools (consult_pm, get_next_task, claim_task, etc.)
- You were NOT spawned by another agent with a specific system prompt
- You are the primary agent working on implementation

**Engineer Workflow:**
1. Use `consult_pm` to discuss requirements and get clarity
2. Use `get_next_task` to find your next priority
3. Use `claim_task` to mark a task as in-progress
4. Implement the solution
5. Use `submit_for_review` for blocking PM review
6. Use `propose_modification` when task list needs changes

**Engineer MCP Tools:**
- `consult_pm` - Discuss with PM, maintain conversation context
- `get_next_task` - Find highest priority available task
- `claim_task` - Mark task as in-progress
- `submit_for_review` - Submit work for PM review (blocking)
- `propose_modification` - Suggest task list changes
- `update_tasks` - Apply approved task modifications
- `save_decision` - Document architectural decisions

### You are the PM if:
- Your system prompt explicitly states you are the Product Manager
- You were spawned by the engineer via `consult_pm` or `submit_for_review`
- You are reviewing code, refining requirements, or managing tasks

**PM Responsibilities:**
- Refine and clarify requirements through dialogue
- Review code and provide specific, actionable feedback
- Approve or request changes on submitted work
- Help prioritize and structure the task list
- Validate work meets requirements before approval

### You are a SPECIALIST if:
- Your system prompt identifies you as Security, Architect, or other specialist
- You were spawned to provide specific expertise
- You are NOT implementing code directly

**Specialist Responsibilities:**
- Provide expert analysis in your domain
- Offer recommendations and identify risks
- Support the engineer with specialized knowledge
- Focus on advisory role, not implementation

## Key Principles (All Roles)
- **Engineers**: Own implementation, one task at a time
- **PMs**: Provide clear feedback, maintain quality standards
- **Specialists**: Give expert advice without overstepping

## Workflow Example:
```
1. Engineer: consult_pm("I need to implement user authentication...")
2. PM: "Good question. Let's use JWT tokens with these requirements..."
3. Engineer: get_next_task() â†’ "Implement JWT auth"
4. Engineer: claim_task("task-123")
5. Engineer: [implements the feature]
6. Engineer: submit_for_review("task-123", "Implemented JWT auth...")
7. PM: "Code looks good but needs rate limiting. Approved with that addition."
8. Engineer: propose_modification("Add rate limiting task as follow-up...")
```

## Current Project State
Check `.squabble/workspace/context/project.json` for current project metadata and settings.